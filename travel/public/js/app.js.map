{"version":3,"sources":["ddslick/ddslick.js","multiselect/bootstrap-multiselect.js","sweetalert/sweetalert.min.js","sticky/jquery.sticky.js"],"names":[],"mappingslfile":"app.js","sourcesContent":["(function (a) { function g(a, b) { var c = a.data(\"ddslick\"); var d = a.find(\".dd-selected\"), e = d.siblings(\".dd-selected-value\"), f = a.find(\".dd-options\"), g = d.siblings(\".dd-pointer\"), h = a.find(\".dd-option\").eq(b), k = h.closest(\"li\"), l = c.settings, m = c.settings.data[b]; a.find(\".dd-option\").removeClass(\"dd-option-selected\"); h.addClass(\"dd-option-selected\"); c.selectedIndex = b; c.selectedItem = k; c.selectedData = m; if (l.showSelectedHTML) { d.html((m.imageSrc ? '<img class=\"dd-selected-image' + (l.imagePosition == \"right\" ? \" dd-image-right\" : \"\") + '\" src=\"' + m.imageSrc + '\" />' : \"\") + (m.text ? '<label class=\"dd-selected-text\">' + m.text + \"</label>\" : \"\") + (m.description ? '<small class=\"dd-selected-description dd-desc' + (l.truncateDescription ? \" dd-selected-description-truncated\" : \"\") + '\" >' + m.description + \"</small>\" : \"\")) } else d.html(m.text); e.val(m.value); c.original.val(m.value); a.data(\"ddslick\", c); i(a); j(a); if (typeof l.onSelected == \"function\") { l.onSelected.call(this, c) } } function h(b) { var c = b.find(\".dd-select\"), d = c.siblings(\".dd-options\"), e = c.find(\".dd-pointer\"), f = d.is(\":visible\"); a(\".dd-click-off-close\").not(d).slideUp(50); a(\".dd-pointer\").removeClass(\"dd-pointer-up\"); if (f) { d.slideUp(\"fast\"); e.removeClass(\"dd-pointer-up\") } else { d.slideDown(\"fast\"); e.addClass(\"dd-pointer-up\") } k(b) } function i(a) { a.find(\".dd-options\").slideUp(50); a.find(\".dd-pointer\").removeClass(\"dd-pointer-up\").removeClass(\"dd-pointer-up\") } function j(a) { var b = a.find(\".dd-select\").css(\"height\"); var c = a.find(\".dd-selected-description\"); var d = a.find(\".dd-selected-image\"); if (c.length <= 0 && d.length > 0) { a.find(\".dd-selected-text\").css(\"lineHeight\", b) } } function k(b) { b.find(\".dd-option\").each(function () { var c = a(this); var d = c.css(\"height\"); var e = c.find(\".dd-option-description\"); var f = b.find(\".dd-option-image\"); if (e.length <= 0 && f.length > 0) { c.find(\".dd-option-text\").css(\"lineHeight\", d) } }) } a.fn.ddslick = function (c) { if (b[c]) { return b[c].apply(this, Array.prototype.slice.call(arguments, 1)) } else if (typeof c === \"object\" || !c) { return b.init.apply(this, arguments) } else { a.error(\"Method \" + c + \" does not exists.\") } }; var b = {}, c = { data: [], keepJSONItemsOnTop: false, width: 260, height: null, background: \"#eee\", selectText: \"\", defaultSelectedIndex: null, truncateDescription: true, imagePosition: \"left\", showSelectedHTML: true, clickOffToClose: true, onSelected: function () { } }, d = '<div class=\"dd-select\"><input class=\"dd-selected-value\" type=\"hidden\" /><a class=\"dd-selected\"></a><span class=\"dd-pointer dd-pointer-down\"></span></div>', e = '<ul class=\"dd-options\"></ul>', f = '<style id=\"css-ddslick\" type=\"text/css\">' + \".dd-select{ border-radius:2px; border:solid 1px #ccc; position:relative; cursor:pointer;}\" + \".dd-desc { color:#aaa; display:block; overflow: hidden; font-weight:normal; line-height: 1.4em; }\" + \".dd-selected{ overflow:hidden; display:block; padding:10px; font-weight:bold;}\" + \".dd-pointer{ width:0; height:0; position:absolute; right:10px; top:50%; margin-top:-3px;}\" + \".dd-pointer-down{ border:solid 5px transparent; border-top:solid 5px #000; }\" + \".dd-pointer-up{border:solid 5px transparent !important; border-bottom:solid 5px #000 !important; margin-top:-8px;}\" + \".dd-options{ border:solid 1px #ccc; border-top:none; list-style:none; box-shadow:0px 1px 5px #ddd; display:none; position:absolute; z-index:2000; margin:0; padding:0;background:#fff; overflow:auto;}\" + \".dd-option{ padding:10px; display:block; border-bottom:solid 1px #ddd; overflow:hidden; text-decoration:none; color:#333; cursor:pointer;-webkit-transition: all 0.25s ease-in-out; -moz-transition: all 0.25s ease-in-out;-o-transition: all 0.25s ease-in-out;-ms-transition: all 0.25s ease-in-out; }\" + \".dd-options > li:last-child > .dd-option{ border-bottom:none;}\" + \".dd-option:hover{ background:#f3f3f3; color:#000;}\" + \".dd-selected-description-truncated { text-overflow: ellipsis; white-space:nowrap; }\" + \".dd-option-selected { background:#f6f6f6; }\" + \".dd-option-image, .dd-selected-image { vertical-align:middle; float:left; margin-right:5px; max-width:64px;}\" + \".dd-image-right { float:right; margin-right:15px; margin-left:5px;}\" + \".dd-container{ position:relative;}​ .dd-selected-text { font-weight:bold}​</style>\"; if (a(\"#css-ddslick\").length <= 0) { a(f).appendTo(\"head\") } b.init = function (b) { var b = a.extend({}, c, b); return this.each(function () { var c = a(this), f = c.data(\"ddslick\"); if (!f) { var i = [], j = b.data; c.find(\"option\").each(function () { var b = a(this), c = b.data(); i.push({ text: a.trim(b.text()), value: b.val(), selected: b.is(\":selected\"), description: c.description, imageSrc: c.imagesrc }) }); if (b.keepJSONItemsOnTop) a.merge(b.data, i); else b.data = a.merge(i, b.data); var k = c, l = a('<div id=\"' + c.attr(\"id\") + '\"></div>'); c.replaceWith(l); c = l; c.addClass(\"dd-container\").append(d).append(e); var i = c.find(\".dd-select\"), m = c.find(\".dd-options\"); m.css({ width: b.width }); i.css({ width: b.width, background: b.background }); c.css({ width: b.width }); if (b.height != null) m.css({ height: b.height, overflow: \"auto\" }); a.each(b.data, function (a, c) { if (c.selected) b.defaultSelectedIndex = a; m.append(\"<li>\" + '<a class=\"dd-option\">' + (c.value ? ' <input class=\"dd-option-value\" type=\"hidden\" value=\"' + c.value + '\" />' : \"\") + (c.imageSrc ? ' <img class=\"dd-option-image' + (b.imagePosition == \"right\" ? \" dd-image-right\" : \"\") + '\" src=\"' + c.imageSrc + '\" />' : \"\") + (c.text ? ' <label class=\"dd-option-text\">' + c.text + \"</label>\" : \"\") + (c.description ? ' <small class=\"dd-option-description dd-desc\">' + c.description + \"</small>\" : \"\") + \"</a>\" + \"</li>\") }); var n = { settings: b, original: k, selectedIndex: -1, selectedItem: null, selectedData: null }; c.data(\"ddslick\", n); if (b.selectText.length > 0 && b.defaultSelectedIndex == null) { c.find(\".dd-selected\").html(b.selectText) } else { var o = b.defaultSelectedIndex != null && b.defaultSelectedIndex >= 0 && b.defaultSelectedIndex < b.data.length ? b.defaultSelectedIndex : 0; g(c, o) } c.find(\".dd-select\").on(\"click.ddslick\", function () { h(c) }); c.find(\".dd-option\").on(\"click.ddslick\", function () { g(c, a(this).closest(\"li\").index()) }); if (b.clickOffToClose) { m.addClass(\"dd-click-off-close\"); c.on(\"click.ddslick\", function (a) { a.stopPropagation() }); a(\"body\").on(\"click\", function () { a(\".dd-click-off-close\").slideUp(50).siblings(\".dd-select\").find(\".dd-pointer\").removeClass(\"dd-pointer-up\") }) } } }) }; b.select = function (b) { return this.each(function () { if (b.index) g(a(this), b.index) }) }; b.open = function () { return this.each(function () { var b = a(this), c = b.data(\"ddslick\"); if (c) h(b) }) }; b.close = function () { return this.each(function () { var b = a(this), c = b.data(\"ddslick\"); if (c) i(b) }) }; b.destroy = function () { return this.each(function () { var b = a(this), c = b.data(\"ddslick\"); if (c) { var d = c.original; b.removeData(\"ddslick\").unbind(\".ddslick\").replaceWith(d) } }) } })(jQuery)","/**\r\n * Bootstrap Multiselect (https://github.com/davidstutz/bootstrap-multiselect)\r\n * \r\n * Apache License, Version 2.0:\r\n * Copyright (c) 2012 - 2015 David Stutz\r\n * \r\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\r\n * use this file except in compliance with the License. You may obtain a\r\n * copy of the License at http://www.apache.org/licenses/LICENSE-2.0\r\n * \r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\r\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\r\n * License for the specific language governing permissions and limitations\r\n * under the License.\r\n * \r\n * BSD 3-Clause License:\r\n * Copyright (c) 2012 - 2015 David Stutz\r\n * All rights reserved.\r\n * \r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *    - Redistributions of source code must retain the above copyright notice,\r\n *      this list of conditions and the following disclaimer.\r\n *    - Redistributions in binary form must reproduce the above copyright notice,\r\n *      this list of conditions and the following disclaimer in the documentation\r\n *      and/or other materials provided with the distribution.\r\n *    - Neither the name of David Stutz nor the names of its contributors may be\r\n *      used to endorse or promote products derived from this software without\r\n *      specific prior written permission.\r\n * \r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\r\n * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\r\n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\r\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\r\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\r\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\r\n * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\r\n * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\r\n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n!function ($) {\r\n    \"use strict\";// jshint ;_;\r\n\r\n    if (typeof ko !== 'undefined' && ko.bindingHandlers && !ko.bindingHandlers.multiselect) {\r\n        ko.bindingHandlers.multiselect = {\r\n            after: ['options', 'value', 'selectedOptions', 'enable', 'disable'],\r\n\r\n            init: function(element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n                var $element = $(element);\r\n                var config = ko.toJS(valueAccessor());\r\n\r\n                $element.multiselect(config);\r\n\r\n                if (allBindings.has('options')) {\r\n                    var options = allBindings.get('options');\r\n                    if (ko.isObservable(options)) {\r\n                        ko.computed({\r\n                            read: function() {\r\n                                options();\r\n                                setTimeout(function() {\r\n                                    var ms = $element.data('multiselect');\r\n                                    if (ms)\r\n                                        ms.updateOriginalOptions();//Not sure how beneficial this is.\r\n                                    $element.multiselect('rebuild');\r\n                                }, 1);\r\n                            },\r\n                            disposeWhenNodeIsRemoved: element\r\n                        });\r\n                    }\r\n                }\r\n\r\n                //value and selectedOptions are two-way, so these will be triggered even by our own actions.\r\n                //It needs some way to tell if they are triggered because of us or because of outside change.\r\n                //It doesn't loop but it's a waste of processing.\r\n                if (allBindings.has('value')) {\r\n                    var value = allBindings.get('value');\r\n                    if (ko.isObservable(value)) {\r\n                        ko.computed({\r\n                            read: function() {\r\n                                value();\r\n                                setTimeout(function() {\r\n                                    $element.multiselect('refresh');\r\n                                }, 1);\r\n                            },\r\n                            disposeWhenNodeIsRemoved: element\r\n                        }).extend({ rateLimit: 100, notifyWhenChangesStop: true });\r\n                    }\r\n                }\r\n\r\n                //Switched from arrayChange subscription to general subscription using 'refresh'.\r\n                //Not sure performance is any better using 'select' and 'deselect'.\r\n                if (allBindings.has('selectedOptions')) {\r\n                    var selectedOptions = allBindings.get('selectedOptions');\r\n                    if (ko.isObservable(selectedOptions)) {\r\n                        ko.computed({\r\n                            read: function() {\r\n                                selectedOptions();\r\n                                setTimeout(function() {\r\n                                    $element.multiselect('refresh');\r\n                                }, 1);\r\n                            },\r\n                            disposeWhenNodeIsRemoved: element\r\n                        }).extend({ rateLimit: 100, notifyWhenChangesStop: true });\r\n                    }\r\n                }\r\n\r\n                var setEnabled = function (enable) {\r\n                    setTimeout(function () {\r\n                        if (enable)\r\n                            $element.multiselect('enable');\r\n                        else\r\n                            $element.multiselect('disable');\r\n                    });\r\n                };\r\n\r\n                if (allBindings.has('enable')) {\r\n                    var enable = allBindings.get('enable');\r\n                    if (ko.isObservable(enable)) {\r\n                        ko.computed({\r\n                            read: function () {\r\n                                setEnabled(enable());\r\n                            },\r\n                            disposeWhenNodeIsRemoved: element\r\n                        }).extend({ rateLimit: 100, notifyWhenChangesStop: true });\r\n                    } else {\r\n                        setEnabled(enable);\r\n                    }\r\n                }\r\n\r\n                if (allBindings.has('disable')) {\r\n                    var disable = allBindings.get('disable');\r\n                    if (ko.isObservable(disable)) {\r\n                        ko.computed({\r\n                            read: function () {\r\n                                setEnabled(!disable());\r\n                            },\r\n                            disposeWhenNodeIsRemoved: element\r\n                        }).extend({ rateLimit: 100, notifyWhenChangesStop: true });\r\n                    } else {\r\n                        setEnabled(!disable);\r\n                    }\r\n                }\r\n\r\n                ko.utils.domNodeDisposal.addDisposeCallback(element, function() {\r\n                    $element.multiselect('destroy');\r\n                });\r\n            },\r\n\r\n            update: function(element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n                var $element = $(element);\r\n                var config = ko.toJS(valueAccessor());\r\n\r\n                $element.multiselect('setOptions', config);\r\n                $element.multiselect('rebuild');\r\n            }\r\n        };\r\n    }\r\n\r\n    function forEach(array, callback) {\r\n        for (var index = 0; index < array.length; ++index) {\r\n            callback(array[index], index);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Constructor to create a new multiselect using the given select.\r\n     *\r\n     * @param {jQuery} select\r\n     * @param {Object} options\r\n     * @returns {Multiselect}\r\n     */\r\n    function Multiselect(select, options) {\r\n\r\n        this.$select = $(select);\r\n        \r\n        // Placeholder via data attributes\r\n        if (this.$select.attr(\"data-placeholder\")) {\r\n            options.nonSelectedText = this.$select.data(\"placeholder\");\r\n        }\r\n        \r\n        this.options = this.mergeOptions($.extend({}, options, this.$select.data()));\r\n\r\n        // Initialization.\r\n        // We have to clone to create a new reference.\r\n        this.originalOptions = this.$select.clone()[0].options;\r\n        this.query = '';\r\n        this.searchTimeout = null;\r\n        this.lastToggledInput = null;\r\n\r\n        this.options.multiple = this.$select.attr('multiple') === \"multiple\";\r\n        this.options.onChange = $.proxy(this.options.onChange, this);\r\n        this.options.onDropdownShow = $.proxy(this.options.onDropdownShow, this);\r\n        this.options.onDropdownHide = $.proxy(this.options.onDropdownHide, this);\r\n        this.options.onDropdownShown = $.proxy(this.options.onDropdownShown, this);\r\n        this.options.onDropdownHidden = $.proxy(this.options.onDropdownHidden, this);\r\n        this.options.onInitialized = $.proxy(this.options.onInitialized, this);\r\n        \r\n        // Build select all if enabled.\r\n        this.buildContainer();\r\n        this.buildButton();\r\n        this.buildDropdown();\r\n        this.buildSelectAll();\r\n        this.buildDropdownOptions();\r\n        this.buildFilter();\r\n\r\n        this.updateButtonText();\r\n        this.updateSelectAll(true);\r\n\r\n        if (this.options.disableIfEmpty && $('option', this.$select).length <= 0) {\r\n            this.disable();\r\n        }\r\n        \r\n        this.$select.hide().after(this.$container);\r\n        this.options.onInitialized(this.$select, this.$container);\r\n    }\r\n\r\n    Multiselect.prototype = {\r\n\r\n        defaults: {\r\n            /**\r\n             * Default text function will either print 'None selected' in case no\r\n             * option is selected or a list of the selected options up to a length\r\n             * of 3 selected options.\r\n             * \r\n             * @param {jQuery} options\r\n             * @param {jQuery} select\r\n             * @returns {String}\r\n             */\r\n            buttonText: function(options, select) {\r\n                if (this.disabledText.length > 0 \r\n                        && (this.disableIfEmpty || select.prop('disabled')) \r\n                        && options.length == 0) {\r\n                    \r\n                    return this.disabledText;\r\n                }\r\n                else if (options.length === 0) {\r\n                    return this.nonSelectedText;\r\n                }\r\n                else if (this.allSelectedText \r\n                        && options.length === $('option', $(select)).length \r\n                        && $('option', $(select)).length !== 1 \r\n                        && this.multiple) {\r\n\r\n                    if (this.selectAllNumber) {\r\n                        return this.allSelectedText + ' (' + options.length + ')';\r\n                    }\r\n                    else {\r\n                        return this.allSelectedText;\r\n                    }\r\n                }\r\n                else if (options.length > this.numberDisplayed) {\r\n                    return options.length + ' ' + this.nSelectedText;\r\n                }\r\n                else {\r\n                    var selected = '';\r\n                    var delimiter = this.delimiterText;\r\n                    \r\n                    options.each(function() {\r\n                        var label = ($(this).attr('label') !== undefined) ? $(this).attr('label') : $(this).text();\r\n                        selected += label + delimiter;\r\n                    });\r\n                    \r\n                    return selected.substr(0, selected.length - 2);\r\n                }\r\n            },\r\n            /**\r\n             * Updates the title of the button similar to the buttonText function.\r\n             * \r\n             * @param {jQuery} options\r\n             * @param {jQuery} select\r\n             * @returns {@exp;selected@call;substr}\r\n             */\r\n            buttonTitle: function(options, select) {\r\n                if (options.length === 0) {\r\n                    return this.nonSelectedText;\r\n                }\r\n                else {\r\n                    var selected = '';\r\n                    var delimiter = this.delimiterText;\r\n                    \r\n                    options.each(function () {\r\n                        var label = ($(this).attr('label') !== undefined) ? $(this).attr('label') : $(this).text();\r\n                        selected += label + delimiter;\r\n                    });\r\n                    return selected.substr(0, selected.length - 2);\r\n                }\r\n            },\r\n            /**\r\n             * Create a label.\r\n             *\r\n             * @param {jQuery} element\r\n             * @returns {String}\r\n             */\r\n            optionLabel: function(element){\r\n                return $(element).attr('label') || $(element).text();\r\n            },\r\n            /**\r\n             * Create a class.\r\n             *\r\n             * @param {jQuery} element\r\n             * @returns {String}\r\n             */\r\n            optionClass: function(element) {\r\n                return $(element).attr('class') || '';\r\n            },\r\n            /**\r\n             * Triggered on change of the multiselect.\r\n             * \r\n             * Not triggered when selecting/deselecting options manually.\r\n             * \r\n             * @param {jQuery} option\r\n             * @param {Boolean} checked\r\n             */\r\n            onChange : function(option, checked) {\r\n\r\n            },\r\n            /**\r\n             * Triggered when the dropdown is shown.\r\n             *\r\n             * @param {jQuery} event\r\n             */\r\n            onDropdownShow: function(event) {\r\n\r\n            },\r\n            /**\r\n             * Triggered when the dropdown is hidden.\r\n             *\r\n             * @param {jQuery} event\r\n             */\r\n            onDropdownHide: function(event) {\r\n\r\n            },\r\n            /**\r\n             * Triggered after the dropdown is shown.\r\n             * \r\n             * @param {jQuery} event\r\n             */\r\n            onDropdownShown: function(event) {\r\n                \r\n            },\r\n            /**\r\n             * Triggered after the dropdown is hidden.\r\n             * \r\n             * @param {jQuery} event\r\n             */\r\n            onDropdownHidden: function(event) {\r\n                \r\n            },\r\n            /**\r\n             * Triggered on select all.\r\n             */\r\n            onSelectAll: function(checked) {\r\n                \r\n            },\r\n            /**\r\n             * Triggered after initializing.\r\n             *\r\n             * @param {jQuery} $select\r\n             * @param {jQuery} $container\r\n             */\r\n            onInitialized: function($select, $container) {\r\n\r\n            },\r\n            enableHTML: false,\r\n            buttonClass: 'btn btn-default',\r\n            inheritClass: false,\r\n            buttonWidth: 'auto',\r\n            buttonContainer: '<div class=\"btn-group\" />',\r\n            dropRight: false,\r\n            dropUp: false,\r\n            selectedClass: 'active',\r\n            // Maximum height of the dropdown menu.\r\n            // If maximum height is exceeded a scrollbar will be displayed.\r\n            maxHeight: false,\r\n            checkboxName: false,\r\n            includeSelectAllOption: false,\r\n            includeSelectAllIfMoreThan: 0,\r\n            selectAllText: ' Select all',\r\n            selectAllValue: 'multiselect-all',\r\n            selectAllName: false,\r\n            selectAllNumber: true,\r\n            selectAllJustVisible: true,\r\n            enableFiltering: false,\r\n            enableCaseInsensitiveFiltering: false,\r\n            enableFullValueFiltering: false,\r\n            enableClickableOptGroups: false,\r\n            enableCollapsibelOptGroups: false,\r\n            filterPlaceholder: 'Search',\r\n            // possible options: 'text', 'value', 'both'\r\n            filterBehavior: 'text',\r\n            includeFilterClearBtn: true,\r\n            preventInputChangeEvent: false,\r\n            nonSelectedText: 'None selected',\r\n            nSelectedText: 'selected',\r\n            allSelectedText: 'All selected',\r\n            numberDisplayed: 3,\r\n            disableIfEmpty: false,\r\n            disabledText: '',\r\n            delimiterText: ', ',\r\n            templates: {\r\n                button: '<button type=\"button\" class=\"multiselect dropdown-toggle\" data-toggle=\"dropdown\"><span class=\"multiselect-selected-text\"></span> <b class=\"caret\"></b></button>',\r\n                ul: '<ul class=\"multiselect-container dropdown-menu\"></ul>',\r\n                filter: '<li class=\"multiselect-item filter\"><div class=\"input-group\"><span class=\"input-group-addon\"><i class=\"glyphicon glyphicon-search\"></i></span><input class=\"form-control multiselect-search\" type=\"text\"></div></li>',\r\n                filterClearBtn: '<span class=\"input-group-btn\"><button class=\"btn btn-default multiselect-clear-filter\" type=\"button\"><i class=\"glyphicon glyphicon-remove-circle\"></i></button></span>',\r\n                li: '<li><a tabindex=\"0\"><label></label></a></li>',\r\n                divider: '<li class=\"multiselect-item divider\"></li>',\r\n                liGroup: '<li class=\"multiselect-item multiselect-group\"><label></label></li>'\r\n            }\r\n        },\r\n\r\n        constructor: Multiselect,\r\n\r\n        /**\r\n         * Builds the container of the multiselect.\r\n         */\r\n        buildContainer: function() {\r\n            this.$container = $(this.options.buttonContainer);\r\n            this.$container.on('show.bs.dropdown', this.options.onDropdownShow);\r\n            this.$container.on('hide.bs.dropdown', this.options.onDropdownHide);\r\n            this.$container.on('shown.bs.dropdown', this.options.onDropdownShown);\r\n            this.$container.on('hidden.bs.dropdown', this.options.onDropdownHidden);\r\n        },\r\n\r\n        /**\r\n         * Builds the button of the multiselect.\r\n         */\r\n        buildButton: function() {\r\n            this.$button = $(this.options.templates.button).addClass(this.options.buttonClass);\r\n            if (this.$select.attr('class') && this.options.inheritClass) {\r\n                this.$button.addClass(this.$select.attr('class'));\r\n            }\r\n            // Adopt active state.\r\n            if (this.$select.prop('disabled')) {\r\n                this.disable();\r\n            }\r\n            else {\r\n                this.enable();\r\n            }\r\n\r\n            // Manually add button width if set.\r\n            if (this.options.buttonWidth && this.options.buttonWidth !== 'auto') {\r\n                this.$button.css({\r\n                    'width' : this.options.buttonWidth,\r\n                    'overflow' : 'hidden',\r\n                    'text-overflow' : 'ellipsis'\r\n                });\r\n                this.$container.css({\r\n                    'width': this.options.buttonWidth\r\n                });\r\n            }\r\n\r\n            // Keep the tab index from the select.\r\n            var tabindex = this.$select.attr('tabindex');\r\n            if (tabindex) {\r\n                this.$button.attr('tabindex', tabindex);\r\n            }\r\n\r\n            this.$container.prepend(this.$button);\r\n        },\r\n\r\n        /**\r\n         * Builds the ul representing the dropdown menu.\r\n         */\r\n        buildDropdown: function() {\r\n\r\n            // Build ul.\r\n            this.$ul = $(this.options.templates.ul);\r\n\r\n            if (this.options.dropRight) {\r\n                this.$ul.addClass('pull-right');\r\n            }\r\n\r\n            // Set max height of dropdown menu to activate auto scrollbar.\r\n            if (this.options.maxHeight) {\r\n                // TODO: Add a class for this option to move the css declarations.\r\n                this.$ul.css({\r\n                    'max-height': this.options.maxHeight + 'px',\r\n                    'overflow-y': 'auto',\r\n                    'overflow-x': 'hidden'\r\n                });\r\n            }\r\n            \r\n            if (this.options.dropUp) {\r\n                \r\n                var height = Math.min(this.options.maxHeight, $('option[data-role!=\"divider\"]', this.$select).length*26 + $('option[data-role=\"divider\"]', this.$select).length*19 + (this.options.includeSelectAllOption ? 26 : 0) + (this.options.enableFiltering || this.options.enableCaseInsensitiveFiltering ? 44 : 0));\r\n                var moveCalc = height + 34;\r\n                \r\n                this.$ul.css({\r\n                    'max-height': height + 'px',\r\n                    'overflow-y': 'auto',\r\n                    'overflow-x': 'hidden',\r\n                    'margin-top': \"-\" + moveCalc + 'px'\r\n                });\r\n            }\r\n            \r\n            this.$container.append(this.$ul);\r\n        },\r\n\r\n        /**\r\n         * Build the dropdown options and binds all nessecary events.\r\n         * \r\n         * Uses createDivider and createOptionValue to create the necessary options.\r\n         */\r\n        buildDropdownOptions: function() {\r\n\r\n            this.$select.children().each($.proxy(function(index, element) {\r\n\r\n                var $element = $(element);\r\n                // Support optgroups and options without a group simultaneously.\r\n                var tag = $element.prop('tagName')\r\n                    .toLowerCase();\r\n            \r\n                if ($element.prop('value') === this.options.selectAllValue) {\r\n                    return;\r\n                }\r\n\r\n                if (tag === 'optgroup') {\r\n                    this.createOptgroup(element);\r\n                }\r\n                else if (tag === 'option') {\r\n\r\n                    if ($element.data('role') === 'divider') {\r\n                        this.createDivider();\r\n                    }\r\n                    else {\r\n                        this.createOptionValue(element);\r\n                    }\r\n\r\n                }\r\n\r\n                // Other illegal tags will be ignored.\r\n            }, this));\r\n\r\n            // Bind the change event on the dropdown elements.\r\n            $('li input', this.$ul).on('change', $.proxy(function(event) {\r\n                var $target = $(event.target);\r\n\r\n                var checked = $target.prop('checked') || false;\r\n                var isSelectAllOption = $target.val() === this.options.selectAllValue;\r\n\r\n                // Apply or unapply the configured selected class.\r\n                if (this.options.selectedClass) {\r\n                    if (checked) {\r\n                        $target.closest('li')\r\n                            .addClass(this.options.selectedClass);\r\n                    }\r\n                    else {\r\n                        $target.closest('li')\r\n                            .removeClass(this.options.selectedClass);\r\n                    }\r\n                }\r\n\r\n                // Get the corresponding option.\r\n                var value = $target.val();\r\n                var $option = this.getOptionByValue(value);\r\n\r\n                var $optionsNotThis = $('option', this.$select).not($option);\r\n                var $checkboxesNotThis = $('input', this.$container).not($target);\r\n\r\n                if (isSelectAllOption) {\r\n                    if (checked) {\r\n                        this.selectAll(this.options.selectAllJustVisible);\r\n                    }\r\n                    else {\r\n                        this.deselectAll(this.options.selectAllJustVisible);\r\n                    }\r\n                }\r\n                else {\r\n                    if (checked) {\r\n                        $option.prop('selected', true);\r\n\r\n                        if (this.options.multiple) {\r\n                            // Simply select additional option.\r\n                            $option.prop('selected', true);\r\n                        }\r\n                        else {\r\n                            // Unselect all other options and corresponding checkboxes.\r\n                            if (this.options.selectedClass) {\r\n                                $($checkboxesNotThis).closest('li').removeClass(this.options.selectedClass);\r\n                            }\r\n\r\n                            $($checkboxesNotThis).prop('checked', false);\r\n                            $optionsNotThis.prop('selected', false);\r\n\r\n                            // It's a single selection, so close.\r\n                            this.$button.click();\r\n                        }\r\n\r\n                        if (this.options.selectedClass === \"active\") {\r\n                            $optionsNotThis.closest(\"a\").css(\"outline\", \"\");\r\n                        }\r\n                    }\r\n                    else {\r\n                        // Unselect option.\r\n                        $option.prop('selected', false);\r\n                    }\r\n                    \r\n                    // To prevent select all from firing onChange: #575\r\n                    this.options.onChange($option, checked);\r\n                }\r\n\r\n                this.$select.change();\r\n\r\n                this.updateButtonText();\r\n                this.updateSelectAll();\r\n\r\n                if(this.options.preventInputChangeEvent) {\r\n                    return false;\r\n                }\r\n            }, this));\r\n\r\n            $('li a', this.$ul).on('mousedown', function(e) {\r\n                if (e.shiftKey) {\r\n                    // Prevent selecting text by Shift+click\r\n                    return false;\r\n                }\r\n            });\r\n        \r\n            $('li a', this.$ul).on('touchstart click', $.proxy(function(event) {\r\n                event.stopPropagation();\r\n\r\n                var $target = $(event.target);\r\n                \r\n                if (event.shiftKey && this.options.multiple) {\r\n                    if($target.is(\"label\")){ // Handles checkbox selection manually (see https://github.com/davidstutz/bootstrap-multiselect/issues/431)\r\n                        event.preventDefault();\r\n                        $target = $target.find(\"input\");\r\n                        $target.prop(\"checked\", !$target.prop(\"checked\"));\r\n                    }\r\n                    var checked = $target.prop('checked') || false;\r\n\r\n                    if (this.lastToggledInput !== null && this.lastToggledInput !== $target) { // Make sure we actually have a range\r\n                        var from = $target.closest(\"li\").index();\r\n                        var to = this.lastToggledInput.closest(\"li\").index();\r\n                        \r\n                        if (from > to) { // Swap the indices\r\n                            var tmp = to;\r\n                            to = from;\r\n                            from = tmp;\r\n                        }\r\n                        \r\n                        // Make sure we grab all elements since slice excludes the last index\r\n                        ++to;\r\n                        \r\n                        // Change the checkboxes and underlying options\r\n                        var range = this.$ul.find(\"li\").slice(from, to).find(\"input\");\r\n                        \r\n                        range.prop('checked', checked);\r\n                        \r\n                        if (this.options.selectedClass) {\r\n                            range.closest('li')\r\n                                .toggleClass(this.options.selectedClass, checked);\r\n                        }\r\n                        \r\n                        for (var i = 0, j = range.length; i < j; i++) {\r\n                            var $checkbox = $(range[i]);\r\n\r\n                            var $option = this.getOptionByValue($checkbox.val());\r\n\r\n                            $option.prop('selected', checked);\r\n                        }                   \r\n                    }\r\n                    \r\n                    // Trigger the select \"change\" event\r\n                    $target.trigger(\"change\");\r\n                }\r\n                \r\n                // Remembers last clicked option\r\n                if($target.is(\"input\") && !$target.closest(\"li\").is(\".multiselect-item\")){\r\n                    this.lastToggledInput = $target;\r\n                }\r\n\r\n                $target.blur();\r\n            }, this));\r\n\r\n            // Keyboard support.\r\n            this.$container.off('keydown.multiselect').on('keydown.multiselect', $.proxy(function(event) {\r\n                if ($('input[type=\"text\"]', this.$container).is(':focus')) {\r\n                    return;\r\n                }\r\n\r\n                if (event.keyCode === 9 && this.$container.hasClass('open')) {\r\n                    this.$button.click();\r\n                }\r\n                else {\r\n                    var $items = $(this.$container).find(\"li:not(.divider):not(.disabled) a\").filter(\":visible\");\r\n\r\n                    if (!$items.length) {\r\n                        return;\r\n                    }\r\n\r\n                    var index = $items.index($items.filter(':focus'));\r\n\r\n                    // Navigation up.\r\n                    if (event.keyCode === 38 && index > 0) {\r\n                        index--;\r\n                    }\r\n                    // Navigate down.\r\n                    else if (event.keyCode === 40 && index < $items.length - 1) {\r\n                        index++;\r\n                    }\r\n                    else if (!~index) {\r\n                        index = 0;\r\n                    }\r\n\r\n                    var $current = $items.eq(index);\r\n                    $current.focus();\r\n\r\n                    if (event.keyCode === 32 || event.keyCode === 13) {\r\n                        var $checkbox = $current.find('input');\r\n\r\n                        $checkbox.prop(\"checked\", !$checkbox.prop(\"checked\"));\r\n                        $checkbox.change();\r\n                    }\r\n\r\n                    event.stopPropagation();\r\n                    event.preventDefault();\r\n                }\r\n            }, this));\r\n\r\n            if(this.options.enableClickableOptGroups && this.options.multiple) {\r\n                $('li.multiselect-group', this.$ul).on('click', $.proxy(function(event) {\r\n                    event.stopPropagation();\r\n                    console.log('test');\r\n                    var group = $(event.target).parent();\r\n\r\n                    // Search all option in optgroup\r\n                    var $options = group.nextUntil('li.multiselect-group');\r\n                    var $visibleOptions = $options.filter(\":visible:not(.disabled)\");\r\n\r\n                    // check or uncheck items\r\n                    var allChecked = true;\r\n                    var optionInputs = $visibleOptions.find('input');\r\n                    var values = [];\r\n                    \r\n                    optionInputs.each(function() {\r\n                        allChecked = allChecked && $(this).prop('checked');\r\n                        values.push($(this).val());\r\n                    });\r\n\r\n                    if (!allChecked) {\r\n                        this.select(values, false);\r\n                    }\r\n                    else {\r\n                        this.deselect(values, false);\r\n                    }\r\n                    \r\n                    this.options.onChange(optionInputs, !allChecked);\r\n               }, this));\r\n            }\r\n\r\n            if (this.options.enableCollapsibleOptGroups && this.options.multiple) {\r\n                $(\"li.multiselect-group input\", this.$ul).off();\r\n                $(\"li.multiselect-group\", this.$ul).siblings().not(\"li.multiselect-group, li.multiselect-all\", this.$ul).each( function () {\r\n                    $(this).toggleClass('hidden', true);\r\n                });\r\n                \r\n                $(\"li.multiselect-group\", this.$ul).on(\"click\", $.proxy(function(group) {\r\n                    group.stopPropagation();\r\n                }, this));\r\n                \r\n                $(\"li.multiselect-group > a > b\", this.$ul).on(\"click\", $.proxy(function(t) {\r\n                    t.stopPropagation();\r\n                    var n = $(t.target).closest('li');\r\n                    var r = n.nextUntil(\"li.multiselect-group\");\r\n                    var i = true;\r\n                    \r\n                    r.each(function() {\r\n                        i = i && $(this).hasClass('hidden');\r\n                    });\r\n                    \r\n                    r.toggleClass('hidden', !i);\r\n                }, this));\r\n                \r\n                $(\"li.multiselect-group > a > input\", this.$ul).on(\"change\", $.proxy(function(t) {\r\n                    t.stopPropagation();\r\n                    var n = $(t.target).closest('li');\r\n                    var r = n.nextUntil(\"li.multiselect-group\", ':not(.disabled)');\r\n                    var s = r.find(\"input\");\r\n                    \r\n                    var i = true;\r\n                    s.each(function() {\r\n                        i = i && $(this).prop(\"checked\");\r\n                    });\r\n                    \r\n                    s.prop(\"checked\", !i).trigger(\"change\");\r\n                }, this));\r\n                \r\n                // Set the initial selection state of the groups.\r\n                $('li.multiselect-group', this.$ul).each(function() {\r\n                    var r = $(this).nextUntil(\"li.multiselect-group\", ':not(.disabled)');\r\n                    var s = r.find(\"input\");\r\n                    \r\n                    var i = true;\r\n                    s.each(function() {\r\n                        i = i && $(this).prop(\"checked\");\r\n                    });\r\n                    \r\n                    $(this).find('input').prop(\"checked\", i);\r\n                });\r\n                \r\n                // Update the group checkbox based on new selections among the\r\n                // corresponding children.\r\n                $(\"li input\", this.$ul).on(\"change\", $.proxy(function(t) {\r\n                    t.stopPropagation();\r\n                    var n = $(t.target).closest('li');\r\n                    var r1 = n.prevUntil(\"li.multiselect-group\", ':not(.disabled)');\r\n                    var r2 = n.nextUntil(\"li.multiselect-group\", ':not(.disabled)');\r\n                    var s1 = r1.find(\"input\");\r\n                    var s2 = r2.find(\"input\");\r\n                    \r\n                    var i = $(t.target).prop('checked');\r\n                    s1.each(function() {\r\n                        i = i && $(this).prop(\"checked\");\r\n                    });\r\n                    \r\n                    s2.each(function() {\r\n                        i = i && $(this).prop(\"checked\");\r\n                    });\r\n                    \r\n                    n.prevAll('.multiselect-group').find('input').prop('checked', i);\r\n                }, this));\r\n                \r\n                $(\"li.multiselect-all\", this.$ul).css('background', '#f3f3f3').css('border-bottom', '1px solid #eaeaea');\r\n                $(\"li.multiselect-group > a, li.multiselect-all > a > label.checkbox\", this.$ul).css('padding', '3px 20px 3px 35px');\r\n                $(\"li.multiselect-group > a > input\", this.$ul).css('margin', '4px 0px 5px -20px');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Create an option using the given select option.\r\n         *\r\n         * @param {jQuery} element\r\n         */\r\n        createOptionValue: function(element) {\r\n            var $element = $(element);\r\n            if ($element.is(':selected')) {\r\n                $element.prop('selected', true);\r\n            }\r\n\r\n            // Support the label attribute on options.\r\n            var label = this.options.optionLabel(element);\r\n            var classes = this.options.optionClass(element);\r\n            var value = $element.val();\r\n            var inputType = this.options.multiple ? \"checkbox\" : \"radio\";\r\n\r\n            var $li = $(this.options.templates.li);\r\n            var $label = $('label', $li);\r\n            $label.addClass(inputType);\r\n            $li.addClass(classes);\r\n\r\n            if (this.options.enableHTML) {\r\n                $label.html(\" \" + label);\r\n            }\r\n            else {\r\n                $label.text(\" \" + label);\r\n            }\r\n        \r\n            var $checkbox = $('<input/>').attr('type', inputType);\r\n\r\n            if (this.options.checkboxName) {\r\n                $checkbox.attr('name', this.options.checkboxName);\r\n            }\r\n            $label.prepend($checkbox);\r\n\r\n            var selected = $element.prop('selected') || false;\r\n            $checkbox.val(value);\r\n\r\n            if (value === this.options.selectAllValue) {\r\n                $li.addClass(\"multiselect-item multiselect-all\");\r\n                $checkbox.parent().parent()\r\n                    .addClass('multiselect-all');\r\n            }\r\n\r\n            $label.attr('title', $element.attr('title'));\r\n\r\n            this.$ul.append($li);\r\n\r\n            if ($element.is(':disabled')) {\r\n                $checkbox.attr('disabled', 'disabled')\r\n                    .prop('disabled', true)\r\n                    .closest('a')\r\n                    .attr(\"tabindex\", \"-1\")\r\n                    .closest('li')\r\n                    .addClass('disabled');\r\n            }\r\n\r\n            $checkbox.prop('checked', selected);\r\n\r\n            if (selected && this.options.selectedClass) {\r\n                $checkbox.closest('li')\r\n                    .addClass(this.options.selectedClass);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Creates a divider using the given select option.\r\n         *\r\n         * @param {jQuery} element\r\n         */\r\n        createDivider: function(element) {\r\n            var $divider = $(this.options.templates.divider);\r\n            this.$ul.append($divider);\r\n        },\r\n\r\n        /**\r\n         * Creates an optgroup.\r\n         *\r\n         * @param {jQuery} group\r\n         */\r\n        createOptgroup: function(group) {            \r\n            if (this.options.enableCollapsibleOptGroups && this.options.multiple) {\r\n                var label = $(group).attr(\"label\");\r\n                var value = $(group).attr(\"value\");\r\n                var r = $('<li class=\"multiselect-item multiselect-group\"><a href=\"javascript:void(0);\"><input type=\"checkbox\" value=\"' + value + '\"/><b> ' + label + '<b class=\"caret\"></b></b></a></li>');\r\n\r\n                if (this.options.enableClickableOptGroups) {\r\n                    r.addClass(\"multiselect-group-clickable\")\r\n                }\r\n                this.$ul.append(r);\r\n                if ($(group).is(\":disabled\")) {\r\n                    r.addClass(\"disabled\")\r\n                }\r\n                $(\"option\", group).each($.proxy(function($, group) {\r\n                    this.createOptionValue(group)\r\n                }, this))\r\n            }\r\n            else {\r\n                var groupName = $(group).prop('label');\r\n\r\n                // Add a header for the group.\r\n                var $li = $(this.options.templates.liGroup);\r\n\r\n                if (this.options.enableHTML) {\r\n                    $('label', $li).html(groupName);\r\n                }\r\n                else {\r\n                    $('label', $li).text(groupName);\r\n                }\r\n\r\n                if (this.options.enableClickableOptGroups) {\r\n                    $li.addClass('multiselect-group-clickable');\r\n                }\r\n\r\n                this.$ul.append($li);\r\n\r\n                if ($(group).is(':disabled')) {\r\n                    $li.addClass('disabled');\r\n                }\r\n\r\n                // Add the options of the group.\r\n                $('option', group).each($.proxy(function(index, element) {\r\n                    this.createOptionValue(element);\r\n                }, this));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Build the select all.\r\n         * \r\n         * Checks if a select all has already been created.\r\n         */\r\n        buildSelectAll: function() {\r\n            if (typeof this.options.selectAllValue === 'number') {\r\n                this.options.selectAllValue = this.options.selectAllValue.toString();\r\n            }\r\n            \r\n            var alreadyHasSelectAll = this.hasSelectAll();\r\n\r\n            if (!alreadyHasSelectAll && this.options.includeSelectAllOption && this.options.multiple\r\n                    && $('option', this.$select).length > this.options.includeSelectAllIfMoreThan) {\r\n\r\n                // Check whether to add a divider after the select all.\r\n                if (this.options.includeSelectAllDivider) {\r\n                    this.$ul.prepend($(this.options.templates.divider));\r\n                }\r\n\r\n                var $li = $(this.options.templates.li);\r\n                $('label', $li).addClass(\"checkbox\");\r\n                \r\n                if (this.options.enableHTML) {\r\n                    $('label', $li).html(\" \" + this.options.selectAllText);\r\n                }\r\n                else {\r\n                    $('label', $li).text(\" \" + this.options.selectAllText);\r\n                }\r\n                \r\n                if (this.options.selectAllName) {\r\n                    $('label', $li).prepend('<input type=\"checkbox\" name=\"' + this.options.selectAllName + '\" />');\r\n                }\r\n                else {\r\n                    $('label', $li).prepend('<input type=\"checkbox\" />');\r\n                }\r\n                \r\n                var $checkbox = $('input', $li);\r\n                $checkbox.val(this.options.selectAllValue);\r\n\r\n                $li.addClass(\"multiselect-item multiselect-all\");\r\n                $checkbox.parent().parent()\r\n                    .addClass('multiselect-all');\r\n\r\n                this.$ul.prepend($li);\r\n\r\n                $checkbox.prop('checked', false);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Builds the filter.\r\n         */\r\n        buildFilter: function() {\r\n\r\n            // Build filter if filtering OR case insensitive filtering is enabled and the number of options exceeds (or equals) enableFilterLength.\r\n            if (this.options.enableFiltering || this.options.enableCaseInsensitiveFiltering) {\r\n                var enableFilterLength = Math.max(this.options.enableFiltering, this.options.enableCaseInsensitiveFiltering);\r\n\r\n                if (this.$select.find('option').length >= enableFilterLength) {\r\n\r\n                    this.$filter = $(this.options.templates.filter);\r\n                    $('input', this.$filter).attr('placeholder', this.options.filterPlaceholder);\r\n                    \r\n                    // Adds optional filter clear button\r\n                    if(this.options.includeFilterClearBtn){\r\n                        var clearBtn = $(this.options.templates.filterClearBtn);\r\n                        clearBtn.on('click', $.proxy(function(event){\r\n                            clearTimeout(this.searchTimeout);\r\n                            this.$filter.find('.multiselect-search').val('');\r\n                            $('li', this.$ul).show().removeClass(\"filter-hidden\");\r\n                            this.updateSelectAll();\r\n                        }, this));\r\n                        this.$filter.find('.input-group').append(clearBtn);\r\n                    }\r\n                    \r\n                    this.$ul.prepend(this.$filter);\r\n\r\n                    this.$filter.val(this.query).on('click', function(event) {\r\n                        event.stopPropagation();\r\n                    }).on('input keydown', $.proxy(function(event) {\r\n                        // Cancel enter key default behaviour\r\n                        if (event.which === 13) {\r\n                          event.preventDefault();\r\n                        }\r\n                        \r\n                        // This is useful to catch \"keydown\" events after the browser has updated the control.\r\n                        clearTimeout(this.searchTimeout);\r\n\r\n                        this.searchTimeout = this.asyncFunction($.proxy(function() {\r\n\r\n                            if (this.query !== event.target.value) {\r\n                                this.query = event.target.value;\r\n\r\n                                var currentGroup, currentGroupVisible;\r\n                                $.each($('li', this.$ul), $.proxy(function(index, element) {\r\n                                    var value = $('input', element).length > 0 ? $('input', element).val() : \"\";\r\n                                    var text = $('label', element).text();\r\n\r\n                                    var filterCandidate = '';\r\n                                    if ((this.options.filterBehavior === 'text')) {\r\n                                        filterCandidate = text;\r\n                                    }\r\n                                    else if ((this.options.filterBehavior === 'value')) {\r\n                                        filterCandidate = value;\r\n                                    }\r\n                                    else if (this.options.filterBehavior === 'both') {\r\n                                        filterCandidate = text + '\\n' + value;\r\n                                    }\r\n\r\n                                    if (value !== this.options.selectAllValue && text) {\r\n\r\n                                        // By default lets assume that element is not\r\n                                        // interesting for this search.\r\n                                        var showElement = false;\r\n\r\n                                        if (this.options.enableCaseInsensitiveFiltering) {\r\n                                            filterCandidate = filterCandidate.toLowerCase();\r\n                                            this.query = this.query.toLowerCase();\r\n                                        }\r\n\r\n                                        if (this.options.enableFullValueFiltering && this.options.filterBehavior !== 'both') {\r\n                                            var valueToMatch = filterCandidate.trim().substring(0, this.query.length);\r\n                                            if (this.query.indexOf(valueToMatch) > -1) {\r\n                                                showElement = true;\r\n                                            }\r\n                                        }\r\n                                        else if (filterCandidate.indexOf(this.query) > -1) {\r\n                                            showElement = true;\r\n                                        }\r\n\r\n                                        // Toggle current element (group or group item) according to showElement boolean.\r\n                                        $(element).toggle(showElement).toggleClass('filter-hidden', !showElement);\r\n                                        \r\n                                        // Differentiate groups and group items.\r\n                                        if ($(element).hasClass('multiselect-group')) {\r\n                                            // Remember group status.\r\n                                            currentGroup = element;\r\n                                            currentGroupVisible = showElement;\r\n                                        }\r\n                                        else {\r\n                                            // Show group name when at least one of its items is visible.\r\n                                            if (showElement) {\r\n                                                $(currentGroup).show().removeClass('filter-hidden');\r\n                                            }\r\n                                            \r\n                                            // Show all group items when group name satisfies filter.\r\n                                            if (!showElement && currentGroupVisible) {\r\n                                                $(element).show().removeClass('filter-hidden');\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }, this));\r\n                            }\r\n\r\n                            this.updateSelectAll();\r\n                        }, this), 300, this);\r\n                    }, this));\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Unbinds the whole plugin.\r\n         */\r\n        destroy: function() {\r\n            this.$container.remove();\r\n            this.$select.show();\r\n            this.$select.data('multiselect', null);\r\n        },\r\n\r\n        /**\r\n         * Refreshs the multiselect based on the selected options of the select.\r\n         */\r\n        refresh: function () {\r\n            var inputs = $.map($('li input', this.$ul), $);\r\n            \r\n            $('option', this.$select).each($.proxy(function (index, element) {\r\n                var $elem = $(element);\r\n                var value = $elem.val();\r\n                var $input;\r\n                for (var i = inputs.length; 0 < i--; /**/) {\r\n                    if (value !== ($input = inputs[i]).val())\r\n                        continue; // wrong li\r\n\r\n                    if ($elem.is(':selected')) {\r\n                        $input.prop('checked', true);\r\n\r\n                        if (this.options.selectedClass) {\r\n                            $input.closest('li')\r\n                                .addClass(this.options.selectedClass);\r\n                        }\r\n                    }\r\n                    else {\r\n                        $input.prop('checked', false);\r\n\r\n                        if (this.options.selectedClass) {\r\n                            $input.closest('li')\r\n                                .removeClass(this.options.selectedClass);\r\n                        }\r\n                    }\r\n\r\n                    if ($elem.is(\":disabled\")) {\r\n                        $input.attr('disabled', 'disabled')\r\n                            .prop('disabled', true)\r\n                            .closest('li')\r\n                            .addClass('disabled');\r\n                    }\r\n                    else {\r\n                        $input.prop('disabled', false)\r\n                            .closest('li')\r\n                            .removeClass('disabled');\r\n                    }\r\n                    break; // assumes unique values\r\n                }\r\n            }, this));\r\n\r\n            this.updateButtonText();\r\n            this.updateSelectAll();\r\n        },\r\n\r\n        /**\r\n         * Select all options of the given values.\r\n         * \r\n         * If triggerOnChange is set to true, the on change event is triggered if\r\n         * and only if one value is passed.\r\n         * \r\n         * @param {Array} selectValues\r\n         * @param {Boolean} triggerOnChange\r\n         */\r\n        select: function(selectValues, triggerOnChange) {\r\n            if(!$.isArray(selectValues)) {\r\n                selectValues = [selectValues];\r\n            }\r\n\r\n            for (var i = 0; i < selectValues.length; i++) {\r\n                var value = selectValues[i];\r\n\r\n                if (value === null || value === undefined) {\r\n                    continue;\r\n                }\r\n\r\n                var $option = this.getOptionByValue(value);\r\n                var $checkbox = this.getInputByValue(value);\r\n\r\n                if($option === undefined || $checkbox === undefined) {\r\n                    continue;\r\n                }\r\n                \r\n                if (!this.options.multiple) {\r\n                    this.deselectAll(false);\r\n                }\r\n                \r\n                if (this.options.selectedClass) {\r\n                    $checkbox.closest('li')\r\n                        .addClass(this.options.selectedClass);\r\n                }\r\n\r\n                $checkbox.prop('checked', true);\r\n                $option.prop('selected', true);\r\n                \r\n                if (triggerOnChange) {\r\n                    this.options.onChange($option, true);\r\n                }\r\n            }\r\n\r\n            this.updateButtonText();\r\n            this.updateSelectAll();\r\n        },\r\n\r\n        /**\r\n         * Clears all selected items.\r\n         */\r\n        clearSelection: function () {\r\n            this.deselectAll(false);\r\n            this.updateButtonText();\r\n            this.updateSelectAll();\r\n        },\r\n\r\n        /**\r\n         * Deselects all options of the given values.\r\n         * \r\n         * If triggerOnChange is set to true, the on change event is triggered, if\r\n         * and only if one value is passed.\r\n         * \r\n         * @param {Array} deselectValues\r\n         * @param {Boolean} triggerOnChange\r\n         */\r\n        deselect: function(deselectValues, triggerOnChange) {\r\n            if(!$.isArray(deselectValues)) {\r\n                deselectValues = [deselectValues];\r\n            }\r\n\r\n            for (var i = 0; i < deselectValues.length; i++) {\r\n                var value = deselectValues[i];\r\n\r\n                if (value === null || value === undefined) {\r\n                    continue;\r\n                }\r\n\r\n                var $option = this.getOptionByValue(value);\r\n                var $checkbox = this.getInputByValue(value);\r\n\r\n                if($option === undefined || $checkbox === undefined) {\r\n                    continue;\r\n                }\r\n\r\n                if (this.options.selectedClass) {\r\n                    $checkbox.closest('li')\r\n                        .removeClass(this.options.selectedClass);\r\n                }\r\n\r\n                $checkbox.prop('checked', false);\r\n                $option.prop('selected', false);\r\n                \r\n                if (triggerOnChange) {\r\n                    this.options.onChange($option, false);\r\n                }\r\n            }\r\n\r\n            this.updateButtonText();\r\n            this.updateSelectAll();\r\n        },\r\n        \r\n        /**\r\n         * Selects all enabled & visible options.\r\n         *\r\n         * If justVisible is true or not specified, only visible options are selected.\r\n         *\r\n         * @param {Boolean} justVisible\r\n         * @param {Boolean} triggerOnSelectAll\r\n         */\r\n        selectAll: function (justVisible, triggerOnSelectAll) {\r\n            justVisible = (this.options.enableCollapsibleOptGroups && this.options.multiple) ? false : justVisible;\r\n            \r\n            var justVisible = typeof justVisible === 'undefined' ? true : justVisible;\r\n            var allCheckboxes = $(\"li input[type='checkbox']:enabled\", this.$ul);\r\n            var visibleCheckboxes = allCheckboxes.filter(\":visible\");\r\n            var allCheckboxesCount = allCheckboxes.length;\r\n            var visibleCheckboxesCount = visibleCheckboxes.length;\r\n            \r\n            if(justVisible) {\r\n                visibleCheckboxes.prop('checked', true);\r\n                $(\"li:not(.divider):not(.disabled)\", this.$ul).filter(\":visible\").addClass(this.options.selectedClass);\r\n            }\r\n            else {\r\n                allCheckboxes.prop('checked', true);\r\n                $(\"li:not(.divider):not(.disabled)\", this.$ul).addClass(this.options.selectedClass);\r\n            }\r\n                \r\n            if (allCheckboxesCount === visibleCheckboxesCount || justVisible === false) {\r\n                $(\"option:not([data-role='divider']):enabled\", this.$select).prop('selected', true);\r\n            }\r\n            else {\r\n                var values = visibleCheckboxes.map(function() {\r\n                    return $(this).val();\r\n                }).get();\r\n                \r\n                $(\"option:enabled\", this.$select).filter(function(index) {\r\n                    return $.inArray($(this).val(), values) !== -1;\r\n                }).prop('selected', true);\r\n            }\r\n            \r\n            if (triggerOnSelectAll) {\r\n                this.options.onSelectAll();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Deselects all options.\r\n         * \r\n         * If justVisible is true or not specified, only visible options are deselected.\r\n         * \r\n         * @param {Boolean} justVisible\r\n         */\r\n        deselectAll: function (justVisible) {\r\n            justVisible = (this.options.enableCollapsibleOptGroups && this.options.multiple) ? false : justVisible;\r\n            justVisible = typeof justVisible === 'undefined' ? true : justVisible;\r\n            \r\n            if(justVisible) {              \r\n                var visibleCheckboxes = $(\"li input[type='checkbox']:not(:disabled)\", this.$ul).filter(\":visible\");\r\n                visibleCheckboxes.prop('checked', false);\r\n                \r\n                var values = visibleCheckboxes.map(function() {\r\n                    return $(this).val();\r\n                }).get();\r\n                \r\n                $(\"option:enabled\", this.$select).filter(function(index) {\r\n                    return $.inArray($(this).val(), values) !== -1;\r\n                }).prop('selected', false);\r\n                \r\n                if (this.options.selectedClass) {\r\n                    $(\"li:not(.divider):not(.disabled)\", this.$ul).filter(\":visible\").removeClass(this.options.selectedClass);\r\n                }\r\n            }\r\n            else {\r\n                $(\"li input[type='checkbox']:enabled\", this.$ul).prop('checked', false);\r\n                $(\"option:enabled\", this.$select).prop('selected', false);\r\n                \r\n                if (this.options.selectedClass) {\r\n                    $(\"li:not(.divider):not(.disabled)\", this.$ul).removeClass(this.options.selectedClass);\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Rebuild the plugin.\r\n         * \r\n         * Rebuilds the dropdown, the filter and the select all option.\r\n         */\r\n        rebuild: function() {\r\n            this.$ul.html('');\r\n\r\n            // Important to distinguish between radios and checkboxes.\r\n            this.options.multiple = this.$select.attr('multiple') === \"multiple\";\r\n\r\n            this.buildSelectAll();\r\n            this.buildDropdownOptions();\r\n            this.buildFilter();\r\n\r\n            this.updateButtonText();\r\n            this.updateSelectAll(true);\r\n            \r\n            if (this.options.disableIfEmpty && $('option', this.$select).length <= 0) {\r\n                this.disable();\r\n            }\r\n            else {\r\n                this.enable();\r\n            }\r\n            \r\n            if (this.options.dropRight) {\r\n                this.$ul.addClass('pull-right');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * The provided data will be used to build the dropdown.\r\n         */\r\n        dataprovider: function(dataprovider) {\r\n            \r\n            var groupCounter = 0;\r\n            var $select = this.$select.empty();\r\n            \r\n            $.each(dataprovider, function (index, option) {\r\n                var $tag;\r\n                \r\n                if ($.isArray(option.children)) { // create optiongroup tag\r\n                    groupCounter++;\r\n                    \r\n                    $tag = $('<optgroup/>').attr({\r\n                        label: option.label || 'Group ' + groupCounter,\r\n                        disabled: !!option.disabled\r\n                    });\r\n                    \r\n                    forEach(option.children, function(subOption) { // add children option tags\r\n                        $tag.append($('<option/>').attr({\r\n                            value: subOption.value,\r\n                            label: subOption.label || subOption.value,\r\n                            title: subOption.title,\r\n                            selected: !!subOption.selected,\r\n                            disabled: !!subOption.disabled\r\n                        }));\r\n                    });\r\n                }\r\n                else {\r\n                    $tag = $('<option/>').attr({\r\n                        value: option.value,\r\n                        label: option.label || option.value,\r\n                        title: option.title,\r\n                        class: option.class,\r\n                        selected: !!option.selected,\r\n                        disabled: !!option.disabled\r\n                    });\r\n                    $tag.text(option.label || option.value);\r\n                }\r\n                \r\n                $select.append($tag);\r\n            });\r\n            \r\n            this.rebuild();\r\n        },\r\n\r\n        /**\r\n         * Enable the multiselect.\r\n         */\r\n        enable: function() {\r\n            this.$select.prop('disabled', false);\r\n            this.$button.prop('disabled', false)\r\n                .removeClass('disabled');\r\n        },\r\n\r\n        /**\r\n         * Disable the multiselect.\r\n         */\r\n        disable: function() {\r\n            this.$select.prop('disabled', true);\r\n            this.$button.prop('disabled', true)\r\n                .addClass('disabled');\r\n        },\r\n\r\n        /**\r\n         * Set the options.\r\n         *\r\n         * @param {Array} options\r\n         */\r\n        setOptions: function(options) {\r\n            this.options = this.mergeOptions(options);\r\n        },\r\n\r\n        /**\r\n         * Merges the given options with the default options.\r\n         *\r\n         * @param {Array} options\r\n         * @returns {Array}\r\n         */\r\n        mergeOptions: function(options) {\r\n            return $.extend(true, {}, this.defaults, this.options, options);\r\n        },\r\n\r\n        /**\r\n         * Checks whether a select all checkbox is present.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        hasSelectAll: function() {\r\n            return $('li.multiselect-all', this.$ul).length > 0;\r\n        },\r\n\r\n        /**\r\n         * Updates the select all checkbox based on the currently displayed and selected checkboxes.\r\n         */\r\n        updateSelectAll: function(notTriggerOnSelectAll) {\r\n            if (this.hasSelectAll()) {\r\n                var allBoxes = $(\"li:not(.multiselect-item):not(.filter-hidden) input:enabled\", this.$ul);\r\n                var allBoxesLength = allBoxes.length;\r\n                var checkedBoxesLength = allBoxes.filter(\":checked\").length;\r\n                var selectAllLi  = $(\"li.multiselect-all\", this.$ul);\r\n                var selectAllInput = selectAllLi.find(\"input\");\r\n                \r\n                if (checkedBoxesLength > 0 && checkedBoxesLength === allBoxesLength) {\r\n                    selectAllInput.prop(\"checked\", true);\r\n                    selectAllLi.addClass(this.options.selectedClass);\r\n                    this.options.onSelectAll(true);\r\n                }\r\n                else {\r\n                    selectAllInput.prop(\"checked\", false);\r\n                    selectAllLi.removeClass(this.options.selectedClass);\r\n                    if (checkedBoxesLength === 0) {\r\n                        if (!notTriggerOnSelectAll) {\r\n                            this.options.onSelectAll(false);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Update the button text and its title based on the currently selected options.\r\n         */\r\n        updateButtonText: function() {\r\n            var options = this.getSelected();\r\n            \r\n            // First update the displayed button text.\r\n            if (this.options.enableHTML) {\r\n                $('.multiselect .multiselect-selected-text', this.$container).html(this.options.buttonText(options, this.$select));\r\n            }\r\n            else {\r\n                $('.multiselect .multiselect-selected-text', this.$container).text(this.options.buttonText(options, this.$select));\r\n            }\r\n            \r\n            // Now update the title attribute of the button.\r\n            $('.multiselect', this.$container).attr('title', this.options.buttonTitle(options, this.$select));\r\n        },\r\n\r\n        /**\r\n         * Get all selected options.\r\n         *\r\n         * @returns {jQUery}\r\n         */\r\n        getSelected: function() {\r\n            return $('option', this.$select).filter(\":selected\");\r\n        },\r\n\r\n        /**\r\n         * Gets a select option by its value.\r\n         *\r\n         * @param {String} value\r\n         * @returns {jQuery}\r\n         */\r\n        getOptionByValue: function (value) {\r\n\r\n            var options = $('option', this.$select);\r\n            var valueToCompare = value.toString();\r\n\r\n            for (var i = 0; i < options.length; i = i + 1) {\r\n                var option = options[i];\r\n                if (option.value === valueToCompare) {\r\n                    return $(option);\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get the input (radio/checkbox) by its value.\r\n         *\r\n         * @param {String} value\r\n         * @returns {jQuery}\r\n         */\r\n        getInputByValue: function (value) {\r\n\r\n            var checkboxes = $('li input', this.$ul);\r\n            var valueToCompare = value.toString();\r\n\r\n            for (var i = 0; i < checkboxes.length; i = i + 1) {\r\n                var checkbox = checkboxes[i];\r\n                if (checkbox.value === valueToCompare) {\r\n                    return $(checkbox);\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Used for knockout integration.\r\n         */\r\n        updateOriginalOptions: function() {\r\n            this.originalOptions = this.$select.clone()[0].options;\r\n        },\r\n\r\n        asyncFunction: function(callback, timeout, self) {\r\n            var args = Array.prototype.slice.call(arguments, 3);\r\n            return setTimeout(function() {\r\n                callback.apply(self || window, args);\r\n            }, timeout);\r\n        },\r\n\r\n        setAllSelectedText: function(allSelectedText) {\r\n            this.options.allSelectedText = allSelectedText;\r\n            this.updateButtonText();\r\n        }\r\n    };\r\n\r\n    $.fn.multiselect = function(option, parameter, extraOptions) {\r\n        return this.each(function() {\r\n            var data = $(this).data('multiselect');\r\n            var options = typeof option === 'object' && option;\r\n\r\n            // Initialize the multiselect.\r\n            if (!data) {\r\n                data = new Multiselect(this, options);\r\n                $(this).data('multiselect', data);\r\n            }\r\n\r\n            // Call multiselect method.\r\n            if (typeof option === 'string') {\r\n                data[option](parameter, extraOptions);\r\n                \r\n                if (option === 'destroy') {\r\n                    $(this).data('multiselect', false);\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    $.fn.multiselect.Constructor = Multiselect;\r\n\r\n    $(function() {\r\n        $(\"select[data-role=multiselect]\").multiselect();\r\n    });\r\n\r\n}(window.jQuery);\r\n","!function(e,t,n){\"use strict\";!function o(e,t,n){function a(s,l){if(!t[s]){if(!e[s]){var i=\"function\"==typeof require&&require;if(!l&&i)return i(s,!0);if(r)return r(s,!0);var u=new Error(\"Cannot find module '\"+s+\"'\");throw u.code=\"MODULE_NOT_FOUND\",u}var c=t[s]={exports:{}};e[s][0].call(c.exports,function(t){var n=e[s][1][t];return a(n?n:t)},c,c.exports,o,e,t,n)}return t[s].exports}for(var r=\"function\"==typeof require&&require,s=0;s<n.length;s++)a(n[s]);return a}({1:[function(o,a,r){var s=function(e){return e&&e.__esModule?e:{\"default\":e}};Object.defineProperty(r,\"__esModule\",{value:!0});var l,i,u,c,d=o(\"./modules/handle-dom\"),f=o(\"./modules/utils\"),p=o(\"./modules/handle-swal-dom\"),m=o(\"./modules/handle-click\"),v=o(\"./modules/handle-key\"),y=s(v),h=o(\"./modules/default-params\"),b=s(h),g=o(\"./modules/set-params\"),w=s(g);r[\"default\"]=u=c=function(){function o(e){var t=a;return t[e]===n?b[\"default\"][e]:t[e]}var a=arguments[0];if(d.addClass(t.body,\"stop-scrolling\"),p.resetInput(),a===n)return f.logStr(\"SweetAlert expects at least 1 attribute!\"),!1;var r=f.extend({},b[\"default\"]);switch(typeof a){case\"string\":r.title=a,r.text=arguments[1]||\"\",r.type=arguments[2]||\"\";break;case\"object\":if(a.title===n)return f.logStr('Missing \"title\" argument!'),!1;r.title=a.title;for(var s in b[\"default\"])r[s]=o(s);r.confirmButtonText=r.showCancelButton?\"Confirm\":b[\"default\"].confirmButtonText,r.confirmButtonText=o(\"confirmButtonText\"),r.doneFunction=arguments[1]||null;break;default:return f.logStr('Unexpected type of argument! Expected \"string\" or \"object\", got '+typeof a),!1}w[\"default\"](r),p.fixVerticalPosition(),p.openModal(arguments[1]);for(var u=p.getModal(),v=u.querySelectorAll(\"button\"),h=[\"onclick\",\"onmouseover\",\"onmouseout\",\"onmousedown\",\"onmouseup\",\"onfocus\"],g=function(e){return m.handleButton(e,r,u)},C=0;C<v.length;C++)for(var S=0;S<h.length;S++){var x=h[S];v[C][x]=g}p.getOverlay().onclick=g,l=e.onkeydown;var k=function(e){return y[\"default\"](e,r,u)};e.onkeydown=k,e.onfocus=function(){setTimeout(function(){i!==n&&(i.focus(),i=n)},0)},c.enableButtons()},u.setDefaults=c.setDefaults=function(e){if(!e)throw new Error(\"userParams is required\");if(\"object\"!=typeof e)throw new Error(\"userParams has to be a object\");f.extend(b[\"default\"],e)},u.close=c.close=function(){var o=p.getModal();d.fadeOut(p.getOverlay(),5),d.fadeOut(o,5),d.removeClass(o,\"showSweetAlert\"),d.addClass(o,\"hideSweetAlert\"),d.removeClass(o,\"visible\");var a=o.querySelector(\".sa-icon.sa-success\");d.removeClass(a,\"animate\"),d.removeClass(a.querySelector(\".sa-tip\"),\"animateSuccessTip\"),d.removeClass(a.querySelector(\".sa-long\"),\"animateSuccessLong\");var r=o.querySelector(\".sa-icon.sa-error\");d.removeClass(r,\"animateErrorIcon\"),d.removeClass(r.querySelector(\".sa-x-mark\"),\"animateXMark\");var s=o.querySelector(\".sa-icon.sa-warning\");return d.removeClass(s,\"pulseWarning\"),d.removeClass(s.querySelector(\".sa-body\"),\"pulseWarningIns\"),d.removeClass(s.querySelector(\".sa-dot\"),\"pulseWarningIns\"),setTimeout(function(){var e=o.getAttribute(\"data-custom-class\");d.removeClass(o,e)},300),d.removeClass(t.body,\"stop-scrolling\"),e.onkeydown=l,e.previousActiveElement&&e.previousActiveElement.focus(),i=n,clearTimeout(o.timeout),!0},u.showInputError=c.showInputError=function(e){var t=p.getModal(),n=t.querySelector(\".sa-input-error\");d.addClass(n,\"show\");var o=t.querySelector(\".sa-error-container\");d.addClass(o,\"show\"),o.querySelector(\"p\").innerHTML=e,setTimeout(function(){u.enableButtons()},1),t.querySelector(\"input\").focus()},u.resetInputError=c.resetInputError=function(e){if(e&&13===e.keyCode)return!1;var t=p.getModal(),n=t.querySelector(\".sa-input-error\");d.removeClass(n,\"show\");var o=t.querySelector(\".sa-error-container\");d.removeClass(o,\"show\")},u.disableButtons=c.disableButtons=function(){var e=p.getModal(),t=e.querySelector(\"button.confirm\"),n=e.querySelector(\"button.cancel\");t.disabled=!0,n.disabled=!0},u.enableButtons=c.enableButtons=function(){var e=p.getModal(),t=e.querySelector(\"button.confirm\"),n=e.querySelector(\"button.cancel\");t.disabled=!1,n.disabled=!1},\"undefined\"!=typeof e?e.sweetAlert=e.swal=u:f.logStr(\"SweetAlert is a frontend module!\"),a.exports=r[\"default\"]},{\"./modules/default-params\":2,\"./modules/handle-click\":3,\"./modules/handle-dom\":4,\"./modules/handle-key\":5,\"./modules/handle-swal-dom\":6,\"./modules/set-params\":8,\"./modules/utils\":9}],2:[function(e,t,n){Object.defineProperty(n,\"__esModule\",{value:!0});var o={title:\"\",text:\"\",type:null,allowOutsideClick:!1,showConfirmButton:!0,showCancelButton:!1,closeOnConfirm:!0,closeOnCancel:!0,confirmButtonText:\"OK\",confirmButtonColor:\"#8CD4F5\",cancelButtonText:\"Cancel\",imageUrl:null,imageSize:null,timer:null,customClass:\"\",html:!1,animation:!0,allowEscapeKey:!0,inputType:\"text\",inputPlaceholder:\"\",inputValue:\"\",showLoaderOnConfirm:!1};n[\"default\"]=o,t.exports=n[\"default\"]},{}],3:[function(t,n,o){Object.defineProperty(o,\"__esModule\",{value:!0});var a=t(\"./utils\"),r=(t(\"./handle-swal-dom\"),t(\"./handle-dom\")),s=function(t,n,o){function s(e){m&&n.confirmButtonColor&&(p.style.backgroundColor=e)}var u,c,d,f=t||e.event,p=f.target||f.srcElement,m=-1!==p.className.indexOf(\"confirm\"),v=-1!==p.className.indexOf(\"sweet-overlay\"),y=r.hasClass(o,\"visible\"),h=n.doneFunction&&\"true\"===o.getAttribute(\"data-has-done-function\");switch(m&&n.confirmButtonColor&&(u=n.confirmButtonColor,c=a.colorLuminance(u,-.04),d=a.colorLuminance(u,-.14)),f.type){case\"mouseover\":s(c);break;case\"mouseout\":s(u);break;case\"mousedown\":s(d);break;case\"mouseup\":s(c);break;case\"focus\":var b=o.querySelector(\"button.confirm\"),g=o.querySelector(\"button.cancel\");m?g.style.boxShadow=\"none\":b.style.boxShadow=\"none\";break;case\"click\":var w=o===p,C=r.isDescendant(o,p);if(!w&&!C&&y&&!n.allowOutsideClick)break;m&&h&&y?l(o,n):h&&y||v?i(o,n):r.isDescendant(o,p)&&\"BUTTON\"===p.tagName&&sweetAlert.close()}},l=function(e,t){var n=!0;r.hasClass(e,\"show-input\")&&(n=e.querySelector(\"input\").value,n||(n=\"\")),t.doneFunction(n),t.closeOnConfirm&&sweetAlert.close(),t.showLoaderOnConfirm&&sweetAlert.disableButtons()},i=function(e,t){var n=String(t.doneFunction).replace(/\\s/g,\"\"),o=\"function(\"===n.substring(0,9)&&\")\"!==n.substring(9,10);o&&t.doneFunction(!1),t.closeOnCancel&&sweetAlert.close()};o[\"default\"]={handleButton:s,handleConfirm:l,handleCancel:i},n.exports=o[\"default\"]},{\"./handle-dom\":4,\"./handle-swal-dom\":6,\"./utils\":9}],4:[function(n,o,a){Object.defineProperty(a,\"__esModule\",{value:!0});var r=function(e,t){return new RegExp(\" \"+t+\" \").test(\" \"+e.className+\" \")},s=function(e,t){r(e,t)||(e.className+=\" \"+t)},l=function(e,t){var n=\" \"+e.className.replace(/[\\t\\r\\n]/g,\" \")+\" \";if(r(e,t)){for(;n.indexOf(\" \"+t+\" \")>=0;)n=n.replace(\" \"+t+\" \",\" \");e.className=n.replace(/^\\s+|\\s+$/g,\"\")}},i=function(e){var n=t.createElement(\"div\");return n.appendChild(t.createTextNode(e)),n.innerHTML},u=function(e){e.style.opacity=\"\",e.style.display=\"block\"},c=function(e){if(e&&!e.length)return u(e);for(var t=0;t<e.length;++t)u(e[t])},d=function(e){e.style.opacity=\"\",e.style.display=\"none\"},f=function(e){if(e&&!e.length)return d(e);for(var t=0;t<e.length;++t)d(e[t])},p=function(e,t){for(var n=t.parentNode;null!==n;){if(n===e)return!0;n=n.parentNode}return!1},m=function(e){e.style.left=\"-9999px\",e.style.display=\"block\";var t,n=e.clientHeight;return t=\"undefined\"!=typeof getComputedStyle?parseInt(getComputedStyle(e).getPropertyValue(\"padding-top\"),10):parseInt(e.currentStyle.padding),e.style.left=\"\",e.style.display=\"none\",\"-\"+parseInt((n+t)/2)+\"px\"},v=function(e,t){if(+e.style.opacity<1){t=t||16,e.style.opacity=0,e.style.display=\"block\";var n=+new Date,o=function(e){function t(){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(){e.style.opacity=+e.style.opacity+(new Date-n)/100,n=+new Date,+e.style.opacity<1&&setTimeout(o,t)});o()}e.style.display=\"block\"},y=function(e,t){t=t||16,e.style.opacity=1;var n=+new Date,o=function(e){function t(){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(){e.style.opacity=+e.style.opacity-(new Date-n)/100,n=+new Date,+e.style.opacity>0?setTimeout(o,t):e.style.display=\"none\"});o()},h=function(n){if(\"function\"==typeof MouseEvent){var o=new MouseEvent(\"click\",{view:e,bubbles:!1,cancelable:!0});n.dispatchEvent(o)}else if(t.createEvent){var a=t.createEvent(\"MouseEvents\");a.initEvent(\"click\",!1,!1),n.dispatchEvent(a)}else t.createEventObject?n.fireEvent(\"onclick\"):\"function\"==typeof n.onclick&&n.onclick()},b=function(t){\"function\"==typeof t.stopPropagation?(t.stopPropagation(),t.preventDefault()):e.event&&e.event.hasOwnProperty(\"cancelBubble\")&&(e.event.cancelBubble=!0)};a.hasClass=r,a.addClass=s,a.removeClass=l,a.escapeHtml=i,a._show=u,a.show=c,a._hide=d,a.hide=f,a.isDescendant=p,a.getTopMargin=m,a.fadeIn=v,a.fadeOut=y,a.fireClick=h,a.stopEventPropagation=b},{}],5:[function(t,o,a){Object.defineProperty(a,\"__esModule\",{value:!0});var r=t(\"./handle-dom\"),s=t(\"./handle-swal-dom\"),l=function(t,o,a){var l=t||e.event,i=l.keyCode||l.which,u=a.querySelector(\"button.confirm\"),c=a.querySelector(\"button.cancel\"),d=a.querySelectorAll(\"button[tabindex]\");if(-1!==[9,13,32,27].indexOf(i)){for(var f=l.target||l.srcElement,p=-1,m=0;m<d.length;m++)if(f===d[m]){p=m;break}9===i?(f=-1===p?u:p===d.length-1?d[0]:d[p+1],r.stopEventPropagation(l),f.focus(),o.confirmButtonColor&&s.setFocusStyle(f,o.confirmButtonColor)):13===i?(\"INPUT\"===f.tagName&&(f=u,u.focus()),f=-1===p?u:n):27===i&&o.allowEscapeKey===!0?(f=c,r.fireClick(f,l)):f=n}};a[\"default\"]=l,o.exports=a[\"default\"]},{\"./handle-dom\":4,\"./handle-swal-dom\":6}],6:[function(n,o,a){var r=function(e){return e&&e.__esModule?e:{\"default\":e}};Object.defineProperty(a,\"__esModule\",{value:!0});var s=n(\"./utils\"),l=n(\"./handle-dom\"),i=n(\"./default-params\"),u=r(i),c=n(\"./injected-html\"),d=r(c),f=\".sweet-alert\",p=\".sweet-overlay\",m=function(){var e=t.createElement(\"div\");for(e.innerHTML=d[\"default\"];e.firstChild;)t.body.appendChild(e.firstChild)},v=function(e){function t(){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(){var e=t.querySelector(f);return e||(m(),e=v()),e}),y=function(){var e=v();return e?e.querySelector(\"input\"):void 0},h=function(){return t.querySelector(p)},b=function(e,t){var n=s.hexToRgb(t);e.style.boxShadow=\"0 0 2px rgba(\"+n+\", 0.8), inset 0 0 0 1px rgba(0, 0, 0, 0.05)\"},g=function(n){var o=v();l.fadeIn(h(),10),l.show(o),l.addClass(o,\"showSweetAlert\"),l.removeClass(o,\"hideSweetAlert\"),e.previousActiveElement=t.activeElement;var a=o.querySelector(\"button.confirm\");a.focus(),setTimeout(function(){l.addClass(o,\"visible\")},500);var r=o.getAttribute(\"data-timer\");if(\"null\"!==r&&\"\"!==r){var s=n;o.timeout=setTimeout(function(){var e=(s||null)&&\"true\"===o.getAttribute(\"data-has-done-function\");e?s(null):sweetAlert.close()},r)}},w=function(){var e=v(),t=y();l.removeClass(e,\"show-input\"),t.value=u[\"default\"].inputValue,t.setAttribute(\"type\",u[\"default\"].inputType),t.setAttribute(\"placeholder\",u[\"default\"].inputPlaceholder),C()},C=function(e){if(e&&13===e.keyCode)return!1;var t=v(),n=t.querySelector(\".sa-input-error\");l.removeClass(n,\"show\");var o=t.querySelector(\".sa-error-container\");l.removeClass(o,\"show\")},S=function(){var e=v();e.style.marginTop=l.getTopMargin(v())};a.sweetAlertInitialize=m,a.getModal=v,a.getOverlay=h,a.getInput=y,a.setFocusStyle=b,a.openModal=g,a.resetInput=w,a.resetInputError=C,a.fixVerticalPosition=S},{\"./default-params\":2,\"./handle-dom\":4,\"./injected-html\":7,\"./utils\":9}],7:[function(e,t,n){Object.defineProperty(n,\"__esModule\",{value:!0});var o='<div class=\"sweet-overlay\" tabIndex=\"-1\"></div><div class=\"sweet-alert\"><div class=\"sa-icon sa-error\">\\n      <span class=\"sa-x-mark\">\\n        <span class=\"sa-line sa-left\"></span>\\n        <span class=\"sa-line sa-right\"></span>\\n      </span>\\n    </div><div class=\"sa-icon sa-warning\">\\n      <span class=\"sa-body\"></span>\\n      <span class=\"sa-dot\"></span>\\n    </div><div class=\"sa-icon sa-info\"></div><div class=\"sa-icon sa-success\">\\n      <span class=\"sa-line sa-tip\"></span>\\n      <span class=\"sa-line sa-long\"></span>\\n\\n      <div class=\"sa-placeholder\"></div>\\n      <div class=\"sa-fix\"></div>\\n    </div><div class=\"sa-icon sa-custom\"></div><h2>Title</h2>\\n    <p>Text</p>\\n    <fieldset>\\n      <input type=\"text\" tabIndex=\"3\" />\\n      <div class=\"sa-input-error\"></div>\\n    </fieldset><div class=\"sa-error-container\">\\n      <div class=\"icon\">!</div>\\n      <p>Not valid!</p>\\n    </div><div class=\"sa-button-container\">\\n      <button class=\"cancel\" tabIndex=\"2\">Cancel</button>\\n      <div class=\"sa-confirm-button-container\">\\n        <button class=\"confirm\" tabIndex=\"1\">OK</button><div class=\"la-ball-fall\">\\n          <div></div>\\n          <div></div>\\n          <div></div>\\n        </div>\\n      </div>\\n    </div></div>';n[\"default\"]=o,t.exports=n[\"default\"]},{}],8:[function(e,t,o){Object.defineProperty(o,\"__esModule\",{value:!0});var a=e(\"./utils\"),r=e(\"./handle-swal-dom\"),s=e(\"./handle-dom\"),l=[\"error\",\"warning\",\"info\",\"success\",\"input\",\"prompt\"],i=function(e){var t=r.getModal(),o=t.querySelector(\"h2\"),i=t.querySelector(\"p\"),u=t.querySelector(\"button.cancel\"),c=t.querySelector(\"button.confirm\");if(o.innerHTML=e.html?e.title:s.escapeHtml(e.title).split(\"\\n\").join(\"<br>\"),i.innerHTML=e.html?e.text:s.escapeHtml(e.text||\"\").split(\"\\n\").join(\"<br>\"),e.text&&s.show(i),e.customClass)s.addClass(t,e.customClass),t.setAttribute(\"data-custom-class\",e.customClass);else{var d=t.getAttribute(\"data-custom-class\");s.removeClass(t,d),t.setAttribute(\"data-custom-class\",\"\")}if(s.hide(t.querySelectorAll(\".sa-icon\")),e.type&&!a.isIE8()){var f=function(){for(var o=!1,a=0;a<l.length;a++)if(e.type===l[a]){o=!0;break}if(!o)return logStr(\"Unknown alert type: \"+e.type),{v:!1};var i=[\"success\",\"error\",\"warning\",\"info\"],u=n;-1!==i.indexOf(e.type)&&(u=t.querySelector(\".sa-icon.sa-\"+e.type),s.show(u));var c=r.getInput();switch(e.type){case\"success\":s.addClass(u,\"animate\"),s.addClass(u.querySelector(\".sa-tip\"),\"animateSuccessTip\"),s.addClass(u.querySelector(\".sa-long\"),\"animateSuccessLong\");break;case\"error\":s.addClass(u,\"animateErrorIcon\"),s.addClass(u.querySelector(\".sa-x-mark\"),\"animateXMark\");break;case\"warning\":s.addClass(u,\"pulseWarning\"),s.addClass(u.querySelector(\".sa-body\"),\"pulseWarningIns\"),s.addClass(u.querySelector(\".sa-dot\"),\"pulseWarningIns\");break;case\"input\":case\"prompt\":c.setAttribute(\"type\",e.inputType),c.value=e.inputValue,c.setAttribute(\"placeholder\",e.inputPlaceholder),s.addClass(t,\"show-input\"),setTimeout(function(){c.focus(),c.addEventListener(\"keyup\",swal.resetInputError)},400)}}();if(\"object\"==typeof f)return f.v}if(e.imageUrl){var p=t.querySelector(\".sa-icon.sa-custom\");p.style.backgroundImage=\"url(\"+e.imageUrl+\")\",s.show(p);var m=80,v=80;if(e.imageSize){var y=e.imageSize.toString().split(\"x\"),h=y[0],b=y[1];h&&b?(m=h,v=b):logStr(\"Parameter imageSize expects value with format WIDTHxHEIGHT, got \"+e.imageSize)}p.setAttribute(\"style\",p.getAttribute(\"style\")+\"width:\"+m+\"px; height:\"+v+\"px\")}t.setAttribute(\"data-has-cancel-button\",e.showCancelButton),e.showCancelButton?u.style.display=\"inline-block\":s.hide(u),t.setAttribute(\"data-has-confirm-button\",e.showConfirmButton),e.showConfirmButton?c.style.display=\"inline-block\":s.hide(c),e.cancelButtonText&&(u.innerHTML=s.escapeHtml(e.cancelButtonText)),e.confirmButtonText&&(c.innerHTML=s.escapeHtml(e.confirmButtonText)),e.confirmButtonColor&&(c.style.backgroundColor=e.confirmButtonColor,c.style.borderLeftColor=e.confirmLoadingButtonColor,c.style.borderRightColor=e.confirmLoadingButtonColor,r.setFocusStyle(c,e.confirmButtonColor)),t.setAttribute(\"data-allow-outside-click\",e.allowOutsideClick);var g=e.doneFunction?!0:!1;t.setAttribute(\"data-has-done-function\",g),e.animation?\"string\"==typeof e.animation?t.setAttribute(\"data-animation\",e.animation):t.setAttribute(\"data-animation\",\"pop\"):t.setAttribute(\"data-animation\",\"none\"),t.setAttribute(\"data-timer\",e.timer)};o[\"default\"]=i,t.exports=o[\"default\"]},{\"./handle-dom\":4,\"./handle-swal-dom\":6,\"./utils\":9}],9:[function(t,n,o){Object.defineProperty(o,\"__esModule\",{value:!0});var a=function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e},r=function(e){var t=/^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(e);return t?parseInt(t[1],16)+\", \"+parseInt(t[2],16)+\", \"+parseInt(t[3],16):null},s=function(){return e.attachEvent&&!e.addEventListener},l=function(t){e.console&&e.console.log(\"SweetAlert: \"+t)},i=function(e,t){e=String(e).replace(/[^0-9a-f]/gi,\"\"),e.length<6&&(e=e[0]+e[0]+e[1]+e[1]+e[2]+e[2]),t=t||0;var n,o,a=\"#\";for(o=0;3>o;o++)n=parseInt(e.substr(2*o,2),16),n=Math.round(Math.min(Math.max(0,n+n*t),255)).toString(16),a+=(\"00\"+n).substr(n.length);return a};o.extend=a,o.hexToRgb=r,o.isIE8=s,o.logStr=l,o.colorLuminance=i},{}]},{},[1]),\"function\"==typeof define&&define.amd?define(function(){return sweetAlert}):\"undefined\"!=typeof module&&module.exports&&(module.exports=sweetAlert)}(window,document);","// Sticky Plugin v1.0.3 for jQuery\r\n// =============\r\n// Author: Anthony Garand\r\n// Improvements by German M. Bravo (Kronuz) and Ruud Kamphuis (ruudk)\r\n// Improvements by Leonardo C. Daronco (daronco)\r\n// Created: 02/14/2011\r\n// Date: 07/20/2015\r\n// Website: http://stickyjs.com/\r\n// Description: Makes an element on the page stick on the screen as you scroll\r\n//              It will only set the 'top' and 'position' of your element, you\r\n//              might need to adjust the width in some cases.\r\n\r\n(function (factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        // AMD. Register as an anonymous module.\r\n        define(['jquery'], factory);\r\n    } else if (typeof module === 'object' && module.exports) {\r\n        // Node/CommonJS\r\n        module.exports = factory(require('jquery'));\r\n    } else {\r\n        // Browser globals\r\n        factory(jQuery);\r\n    }\r\n}(function ($) {\r\n    var slice = Array.prototype.slice; // save ref to original slice()\r\n    var splice = Array.prototype.splice; // save ref to original slice()\r\n\r\n  var defaults = {\r\n      topSpacing: 0,\r\n      bottomSpacing: 0,\r\n      className: 'is-sticky',\r\n      wrapperClassName: 'sticky-wrapper',\r\n      center: false,\r\n      getWidthFrom: '',\r\n      widthFromWrapper: true, // works only when .getWidthFrom is empty\r\n      responsiveWidth: false\r\n    },\r\n    $window = $(window),\r\n    $document = $(document),\r\n    sticked = [],\r\n    windowHeight = $window.height(),\r\n    scroller = function() {\r\n      var scrollTop = $window.scrollTop(),\r\n        documentHeight = $document.height(),\r\n        dwh = documentHeight - windowHeight,\r\n        extra = (scrollTop > dwh) ? dwh - scrollTop : 0;\r\n\r\n      for (var i = 0, l = sticked.length; i < l; i++) {\r\n        var s = sticked[i],\r\n          elementTop = s.stickyWrapper.offset().top,\r\n          etse = elementTop - s.topSpacing - extra;\r\n\r\n        //update height in case of dynamic content\r\n        s.stickyWrapper.css('height', s.stickyElement.outerHeight());\r\n\r\n        if (scrollTop <= etse) {\r\n          if (s.currentTop !== null) {\r\n            s.stickyElement\r\n              .css({\r\n                'width': '',\r\n                'position': '',\r\n                'top': ''\r\n              });\r\n            s.stickyElement.parent().removeClass(s.className);\r\n            s.stickyElement.trigger('sticky-end', [s]);\r\n            s.currentTop = null;\r\n          }\r\n        }\r\n        else {\r\n          var newTop = documentHeight - s.stickyElement.outerHeight()\r\n            - s.topSpacing - s.bottomSpacing - scrollTop - extra;\r\n          if (newTop < 0) {\r\n            newTop = newTop + s.topSpacing;\r\n          } else {\r\n            newTop = s.topSpacing;\r\n          }\r\n          if (s.currentTop !== newTop) {\r\n            var newWidth;\r\n            if (s.getWidthFrom) {\r\n                newWidth = $(s.getWidthFrom).width() || null;\r\n            } else if (s.widthFromWrapper) {\r\n                newWidth = s.stickyWrapper.width();\r\n            }\r\n            if (newWidth == null) {\r\n                newWidth = s.stickyElement.width();\r\n            }\r\n            s.stickyElement\r\n              .css('width', newWidth)\r\n              .css('position', 'fixed')\r\n              .css('top', newTop);\r\n\r\n            s.stickyElement.parent().addClass(s.className);\r\n\r\n            if (s.currentTop === null) {\r\n              s.stickyElement.trigger('sticky-start', [s]);\r\n            } else {\r\n              // sticky is started but it have to be repositioned\r\n              s.stickyElement.trigger('sticky-update', [s]);\r\n            }\r\n\r\n            if (s.currentTop === s.topSpacing && s.currentTop > newTop || s.currentTop === null && newTop < s.topSpacing) {\r\n              // just reached bottom || just started to stick but bottom is already reached\r\n              s.stickyElement.trigger('sticky-bottom-reached', [s]);\r\n            } else if(s.currentTop !== null && newTop === s.topSpacing && s.currentTop < newTop) {\r\n              // sticky is started && sticked at topSpacing && overflowing from top just finished\r\n              s.stickyElement.trigger('sticky-bottom-unreached', [s]);\r\n            }\r\n\r\n            s.currentTop = newTop;\r\n          }\r\n\r\n          // Check if sticky has reached end of container and stop sticking\r\n          var stickyWrapperContainer = s.stickyWrapper.parent();\r\n          var unstick = (s.stickyElement.offset().top + s.stickyElement.outerHeight() >= stickyWrapperContainer.offset().top + stickyWrapperContainer.outerHeight()) && (s.stickyElement.offset().top <= s.topSpacing);\r\n\r\n          if( unstick ) {\r\n            s.stickyElement\r\n              .css('position', 'absolute')\r\n              .css('top', '')\r\n              .css('bottom', 0);\r\n          } else {\r\n            s.stickyElement\r\n              .css('position', 'fixed')\r\n              .css('top', newTop)\r\n              .css('bottom', '');\r\n          }\r\n        }\r\n      }\r\n    },\r\n    resizer = function() {\r\n      windowHeight = $window.height();\r\n\r\n      for (var i = 0, l = sticked.length; i < l; i++) {\r\n        var s = sticked[i];\r\n        var newWidth = null;\r\n        if (s.getWidthFrom) {\r\n            if (s.responsiveWidth) {\r\n                newWidth = $(s.getWidthFrom).width();\r\n            }\r\n        } else if(s.widthFromWrapper) {\r\n            newWidth = s.stickyWrapper.width();\r\n        }\r\n        if (newWidth != null) {\r\n            s.stickyElement.css('width', newWidth);\r\n        }\r\n      }\r\n    },\r\n    methods = {\r\n      init: function(options) {\r\n        var o = $.extend({}, defaults, options);\r\n        return this.each(function() {\r\n          var stickyElement = $(this);\r\n\r\n          var stickyId = stickyElement.attr('id');\r\n          var wrapperId = stickyId ? stickyId + '-' + defaults.wrapperClassName : defaults.wrapperClassName;\r\n          var wrapper = $('<div></div>')\r\n            .attr('id', wrapperId)\r\n            .addClass(o.wrapperClassName);\r\n\r\n          stickyElement.wrapAll(wrapper);\r\n\r\n          var stickyWrapper = stickyElement.parent();\r\n\r\n          if (o.center) {\r\n            stickyWrapper.css({width:stickyElement.outerWidth(),marginLeft:\"auto\",marginRight:\"auto\"});\r\n          }\r\n\r\n          if (stickyElement.css(\"float\") === \"right\") {\r\n            stickyElement.css({\"float\":\"none\"}).parent().css({\"float\":\"right\"});\r\n          }\r\n\r\n          o.stickyElement = stickyElement;\r\n          o.stickyWrapper = stickyWrapper;\r\n          o.currentTop    = null;\r\n\r\n          sticked.push(o);\r\n\r\n          methods.setWrapperHeight(this);\r\n          methods.setupChangeListeners(this);\r\n        });\r\n      },\r\n\r\n      setWrapperHeight: function(stickyElement) {\r\n        var element = $(stickyElement);\r\n        var stickyWrapper = element.parent();\r\n        if (stickyWrapper) {\r\n          stickyWrapper.css('height', element.outerHeight());\r\n        }\r\n      },\r\n\r\n      setupChangeListeners: function(stickyElement) {\r\n        if (window.MutationObserver) {\r\n          var mutationObserver = new window.MutationObserver(function(mutations) {\r\n            if (mutations[0].addedNodes.length || mutations[0].removedNodes.length) {\r\n              methods.setWrapperHeight(stickyElement);\r\n            }\r\n          });\r\n          mutationObserver.observe(stickyElement, {subtree: true, childList: true});\r\n        } else {\r\n          stickyElement.addEventListener('DOMNodeInserted', function() {\r\n            methods.setWrapperHeight(stickyElement);\r\n          }, false);\r\n          stickyElement.addEventListener('DOMNodeRemoved', function() {\r\n            methods.setWrapperHeight(stickyElement);\r\n          }, false);\r\n        }\r\n      },\r\n      update: scroller,\r\n      unstick: function(options) {\r\n        return this.each(function() {\r\n          var that = this;\r\n          var unstickyElement = $(that);\r\n\r\n          var removeIdx = -1;\r\n          var i = sticked.length;\r\n          while (i-- > 0) {\r\n            if (sticked[i].stickyElement.get(0) === that) {\r\n                splice.call(sticked,i,1);\r\n                removeIdx = i;\r\n            }\r\n          }\r\n          if(removeIdx !== -1) {\r\n            unstickyElement.unwrap();\r\n            unstickyElement\r\n              .css({\r\n                'width': '',\r\n                'position': '',\r\n                'top': '',\r\n                'float': ''\r\n              })\r\n            ;\r\n          }\r\n        });\r\n      }\r\n    };\r\n\r\n  // should be more efficient than using $window.scroll(scroller) and $window.resize(resizer):\r\n  if (window.addEventListener) {\r\n    window.addEventListener('scroll', scroller, false);\r\n    window.addEventListener('resize', resizer, false);\r\n  } else if (window.attachEvent) {\r\n    window.attachEvent('onscroll', scroller);\r\n    window.attachEvent('onresize', resizer);\r\n  }\r\n\r\n  $.fn.sticky = function(method) {\r\n    if (methods[method]) {\r\n      return methods[method].apply(this, slice.call(arguments, 1));\r\n    } else if (typeof method === 'object' || !method ) {\r\n      return methods.init.apply( this, arguments );\r\n    } else {\r\n      $.error('Method ' + method + ' does not exist on jQuery.sticky');\r\n    }\r\n  };\r\n\r\n  $.fn.unstick = function(method) {\r\n    if (methods[method]) {\r\n      return methods[method].apply(this, slice.call(arguments, 1));\r\n    } else if (typeof method === 'object' || !method ) {\r\n      return methods.unstick.apply( this, arguments );\r\n    } else {\r\n      $.error('Method ' + method + ' does not exist on jQuery.sticky');\r\n    }\r\n  };\r\n  $(function() {\r\n    setTimeout(scroller, 0);\r\n  });\r\n}));\r\n"],"sourceRoot":"/source/"}